# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'E:\AllPythonCodes\fitmierz\kalorieapka.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sqlite3
from datetime import datetime
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT
from matplotlib.figure import Figure
from matplotlib import *


class MplWidget(QtWidgets.QWidget):
  
        def __init__(self):
                        
                        super().__init__()

                        fig = Figure(figsize=(5, 5))
                        self.can = FigureCanvasQTAgg(fig)
                        self.toolbar = NavigationToolbar2QT(self.can, self)
                        layout = QtWidgets.QVBoxLayout(self)
                        layout.addWidget(self.toolbar)
                        layout.addWidget(self.can)
                        self.ax = self.can.figure.add_subplot(111)

        def plot_line(self, data, elementy, label):
                        # plot a basic line plot from x and y values.
                        self.ax.cla() # clears the axis
                        self.ax.plot(data, elementy, label=label)
                        self.ax.grid(True)
                        self.ax.legend()
                        self.can.figure.tight_layout()
                        
                        self.can.draw()

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1121, 903)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("background-color: rgb(20, 20, 20);")
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.tab)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.formLayout = QtWidgets.QFormLayout()
        self.formLayout.setObjectName("formLayout")
        self.frame = QtWidgets.QFrame(self.tab)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.frame_3 = QtWidgets.QFrame(self.frame)
        self.frame_3.setMaximumSize(QtCore.QSize(360, 16777215))
        self.frame_3.setStyleSheet("background-color: rgb(25, 25, 25);")
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame_3)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.frame_2 = QtWidgets.QFrame(self.frame_3)
        self.frame_2.setMinimumSize(QtCore.QSize(10, 50))
        self.frame_2.setStyleSheet("background-color: rgb(35, 35, 35);\n"
"border:1px solid rgb(195, 195, 195); ")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame_2)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton = QtWidgets.QPushButton(self.frame_2)
        self.pushButton.setMinimumSize(QtCore.QSize(0, 40))
        self.pushButton.setMaximumSize(QtCore.QSize(200, 16777215))
        self.pushButton.setStyleSheet("font: 36pt \"MS Shell Dlg 2\";\n"
"color: rgb(255, 255, 255);")
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        self.label = QtWidgets.QLabel(self.frame_2)
        self.label.setMinimumSize(QtCore.QSize(200, 40))
        self.label.setMaximumSize(QtCore.QSize(100, 16777215))
        self.label.setStyleSheet("color: rgb(255, 255, 255);\n"
"font:16pt \"MS Shell Dlg 2\";")
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.pushButton_2 = QtWidgets.QPushButton(self.frame_2)
        self.pushButton_2.setMinimumSize(QtCore.QSize(0, 40))
        self.pushButton_2.setMaximumSize(QtCore.QSize(200, 16777215))
        self.pushButton_2.setStyleSheet("font: 36pt \"MS Shell Dlg 2\";\n"
"color: rgb(255, 255, 255);")
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout.addWidget(self.pushButton_2)
        self.verticalLayout_2.addWidget(self.frame_2)
        self.calendarWidget = QtWidgets.QCalendarWidget(self.frame_3)
        self.calendarWidget.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.calendarWidget.setStyleSheet("background-color: rgb(55, 55, 55);\n"
"alternate-background-color: rgb(85, 85, 85);\n"
"color: rgb(0, 255, 255);\n"
"gridline-color: rgb(255, 255, 255);")
        self.calendarWidget.setObjectName("calendarWidget")
        self.current_date=self.calendarWidget.selectedDate()
        
        self.verticalLayout_2.addWidget(self.calendarWidget)
        self.listWidget = QtWidgets.QListWidget(self.frame_3)
        self.listWidget.setStyleSheet("font: 24pt \"MS Shell Dlg 2\";\n"
"color: rgb(255, 255, 255);")
        self.listWidget.setObjectName("listWidget")
        self.verticalLayout_2.addWidget(self.listWidget)
        self.pushButton_4 = QtWidgets.QPushButton(self.frame_3)
        self.pushButton_4.setStyleSheet("color: rgb(0, 0, 0);\n"
"\n"
"\n"
"font: 12pt \"MS Shell Dlg 2\";\n"
"background-color: rgb(255, 0, 0);\n"
"")
        self.pushButton_4.setObjectName("pushButton_4")
        self.verticalLayout_2.addWidget(self.pushButton_4)
        self.lineEdit = QtWidgets.QLineEdit(self.frame_3)
        self.lineEdit.setMinimumSize(QtCore.QSize(0, 40))
        self.lineEdit.setStyleSheet("background-color: rgb(55, 55, 55);\n"
"color: rgb(255, 255, 255);\n"
"font: 12pt \"MS Shell Dlg 2\";")
        self.lineEdit.setObjectName("lineEdit")
        self.verticalLayout_2.addWidget(self.lineEdit)
        self.frame_5 = QtWidgets.QFrame(self.frame_3)
        self.frame_5.setMinimumSize(QtCore.QSize(0, 30))
        self.frame_5.setStyleSheet("background-color: rgb(45, 45, 45);")
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frame_5)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.timeEdit = QtWidgets.QTimeEdit(self.frame_5)
        self.timeEdit.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 12pt \"MS Shell Dlg 2\";")
        self.timeEdit.setObjectName("timeEdit")
        self.horizontalLayout_3.addWidget(self.timeEdit)
        self.checkBox = QtWidgets.QCheckBox(self.frame_5)
        self.checkBox.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.checkBox.setStyleSheet("color: rgb(255, 255, 255);")
        self.checkBox.setObjectName("checkBox")
        self.horizontalLayout_3.addWidget(self.checkBox)
        self.verticalLayout_2.addWidget(self.frame_5)
        self.pushButton_3 = QtWidgets.QPushButton(self.frame_3)
        self.pushButton_3.setStyleSheet("color: rgb(0, 0, 0);\n"
"\n"
"\n"
"font: 12pt \"MS Shell Dlg 2\";\n"
"background-color: rgb(0, 255, 255);")
        self.pushButton_3.setObjectName("pushButton_3")
        self.verticalLayout_2.addWidget(self.pushButton_3)
        self.horizontalLayout_2.addWidget(self.frame_3)
        self.frame_4 = QtWidgets.QFrame(self.frame)
        self.frame_4.setStyleSheet("background-color: rgb(25, 25, 25);")
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.frame_4)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label_3 = QtWidgets.QLabel(self.frame_4)
        self.label_3.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 10pt \"MS Shell Dlg 2\";")
        self.label_3.setObjectName("label_3")
        self.verticalLayout_3.addWidget(self.label_3)
        self.frame_6 = QtWidgets.QFrame(self.frame_4)
        self.frame_6.setMinimumSize(QtCore.QSize(0, 50))
        self.frame_6.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_6.setObjectName("frame_6")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.frame_6)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.tableWidget = QtWidgets.QTableWidget(self.frame_6)
        self.tableWidget.setMinimumSize(QtCore.QSize(200, 0))
        self.tableWidget.setAutoFillBackground(False)
        self.tableWidget.setStyleSheet("QTableView {\n"
"    color:#FFFFFF\n"
"}\n"
"QTableView  QHeaderView::section\n"
"{\n"
"    \n"
"    font: 8pt \"MS Shell Dlg 2\";\n"
"    color:#FFFFFF;\n"
"    \n"
"    background: rgb(55, 55, 55);\n"
"    border:none;\n"
"    text-align:left;\n"
"    min-height:40px;\n"
"    max-height:40px;\n"
"\n"
"}\n"
"QTableView QTableCornerButton::section {\n"
"    background: rgb(55, 55, 55);\n"
"    border: 2px outset rgb(55, 55, 55);\n"
"}")
        self.tableWidget.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tableWidget.setTabKeyNavigation(True)
        self.tableWidget.setProperty("showDropIndicator", True)
        self.tableWidget.setDragDropOverwriteMode(False)
        self.tableWidget.setDragDropMode(QtWidgets.QAbstractItemView.DragDrop)
        self.tableWidget.setDefaultDropAction(QtCore.Qt.TargetMoveAction)
        self.tableWidget.setAlternatingRowColors(False)
        self.tableWidget.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.tableWidget.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tableWidget.setTextElideMode(QtCore.Qt.ElideRight)
        self.tableWidget.setShowGrid(True)
        self.tableWidget.setGridStyle(QtCore.Qt.DashLine)
        self.tableWidget.setWordWrap(False)
        self.tableWidget.setCornerButtonEnabled(False)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(5)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        self.tableWidget.horizontalHeader().setCascadingSectionResizes(False)
        self.tableWidget.horizontalHeader().setDefaultSectionSize(75)
        self.tableWidget.horizontalHeader().setHighlightSections(True)
        self.tableWidget.horizontalHeader().setMinimumSectionSize(44)
        self.tableWidget.horizontalHeader().setSortIndicatorShown(False)
        self.tableWidget.horizontalHeader().setStretchLastSection(True)
        self.tableWidget.verticalHeader().setDefaultSectionSize(44)
        self.horizontalLayout_4.addWidget(self.tableWidget)
        self.frame_7 = QtWidgets.QFrame(self.frame_6)
        self.frame_7.setMinimumSize(QtCore.QSize(100, 0))
        self.frame_7.setMaximumSize(QtCore.QSize(200, 16777215))
        self.frame_7.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_7.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_7.setObjectName("frame_7")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.frame_7)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.frame_8 = QtWidgets.QFrame(self.frame_7)
        self.frame_8.setMinimumSize(QtCore.QSize(0, 50))
        self.frame_8.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_8.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_8.setObjectName("frame_8")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.frame_8)
        self.horizontalLayout_5.setContentsMargins(4, -1, -1, -1)
        self.horizontalLayout_5.setSpacing(6)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.frame_8)
        self.lineEdit_2.setMinimumSize(QtCore.QSize(0, 30))
        self.lineEdit_2.setStyleSheet("color: rgb(255, 255, 255);")
        self.lineEdit_2.setText("")
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.horizontalLayout_5.addWidget(self.lineEdit_2)
        self.pushButton_5 = QtWidgets.QPushButton(self.frame_8)
        self.pushButton_5.setMinimumSize(QtCore.QSize(0, 30))
        self.pushButton_5.setMaximumSize(QtCore.QSize(40, 16777215))
        self.pushButton_5.setStyleSheet("background-color: rgb(155, 255, 255);")
        self.pushButton_5.setObjectName("pushButton_5")
        self.horizontalLayout_5.addWidget(self.pushButton_5)
        self.verticalLayout_4.addWidget(self.frame_8)
        self.listWidget_2 = QtWidgets.QListWidget(self.frame_7)
        self.listWidget_2.setStyleSheet("color: rgb(255, 255, 255);")
        self.listWidget_2.setObjectName("listWidget_2")
        item = QtWidgets.QListWidgetItem()
        self.listWidget_2.addItem(item)
        self.verticalLayout_4.addWidget(self.listWidget_2)
        self.lineEdit_3 = QtWidgets.QLineEdit(self.frame_7)
        self.lineEdit_3.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 8pt \"MS Shell Dlg 2\";")
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.verticalLayout_4.addWidget(self.lineEdit_3)


        self.pushButton_6 = QtWidgets.QPushButton(self.frame_7)
        self.pushButton_6.setStyleSheet("color: rgb(0, 0, 0);\n"
"background-color: rgb(155, 255, 255);")
        self.pushButton_6.setObjectName("pushButton_6")
        self.verticalLayout_4.addWidget(self.pushButton_6)

        self.pushButton_9 = QtWidgets.QPushButton(self.frame_7)
        self.pushButton_9.setStyleSheet("color: rgb(0, 0, 0);\n"
"background-color: rgb(255, 0, 0);")
        self.pushButton_9.setObjectName("pushButton_7")
        self.verticalLayout_4.addWidget(self.pushButton_9)

        self.horizontalLayout_4.addWidget(self.frame_7)
        self.verticalLayout_3.addWidget(self.frame_6)
        self.label_2 = QtWidgets.QLabel(self.frame_4)
        self.label_2.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 12pt \"MS Shell Dlg 2\";")
        self.label_2.setObjectName("label_2")
        self.verticalLayout_3.addWidget(self.label_2)
        self.frame_9 = QtWidgets.QFrame(self.frame_4)
        self.frame_9.setMinimumSize(QtCore.QSize(0, 200))
        self.frame_9.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_9.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_9.setObjectName("frame_9")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.frame_9)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.tableWidget_2 = QtWidgets.QTableWidget(self.frame_9)
        self.tableWidget_2.setMinimumSize(QtCore.QSize(200, 0))
        self.tableWidget_2.setAutoFillBackground(False)
        self.tableWidget_2.setStyleSheet("QTableView {\n"
"    color:#FFFFFF\n"
"}\n"
"QTableView  QHeaderView::section\n"
"{\n"
"    \n"
"    font: 8pt \"MS Shell Dlg 2\";\n"
"    color:#FFFFFF;\n"
"    \n"
"    background: rgb(55, 55, 55);\n"
"    border:none;\n"
"    text-align:left;\n"
"    min-height:40px;\n"
"    max-height:40px;\n"
"\n"
"}\n"
"QTableView QTableCornerButton::section {\n"
"    background: rgb(55, 55, 55);\n"
"    border: 2px outset rgb(55, 55, 55);\n"
"}")
        self.tableWidget_2.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tableWidget_2.setTabKeyNavigation(True)
        self.tableWidget_2.setProperty("showDropIndicator", True)
        self.tableWidget_2.setDragDropOverwriteMode(False)
        self.tableWidget_2.setDragDropMode(QtWidgets.QAbstractItemView.DragDrop)
        self.tableWidget_2.setDefaultDropAction(QtCore.Qt.TargetMoveAction)
        self.tableWidget_2.setAlternatingRowColors(False)
        self.tableWidget_2.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.tableWidget_2.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tableWidget_2.setTextElideMode(QtCore.Qt.ElideRight)
        self.tableWidget_2.setShowGrid(True)
        self.tableWidget_2.setGridStyle(QtCore.Qt.DashLine)
        self.tableWidget_2.setWordWrap(False)
        self.tableWidget_2.setCornerButtonEnabled(False)
        self.tableWidget_2.setObjectName("tableWidget_2")
        self.tableWidget_2.setColumnCount(2)
        self.tableWidget_2.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(2, item)
        self.tableWidget_2.horizontalHeader().setCascadingSectionResizes(False)
        self.tableWidget_2.horizontalHeader().setDefaultSectionSize(120)
        self.tableWidget_2.horizontalHeader().setHighlightSections(True)
        self.tableWidget_2.horizontalHeader().setMinimumSectionSize(44)
        self.tableWidget_2.horizontalHeader().setSortIndicatorShown(False)
        self.tableWidget_2.horizontalHeader().setStretchLastSection(True)
        self.tableWidget_2.verticalHeader().setDefaultSectionSize(44)
        self.horizontalLayout_7.addWidget(self.tableWidget_2)
        self.frame_10 = QtWidgets.QFrame(self.frame_9)
        self.frame_10.setMinimumSize(QtCore.QSize(100, 0))
        self.frame_10.setMaximumSize(QtCore.QSize(200, 16777215))
        self.frame_10.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_10.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_10.setObjectName("frame_10")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.frame_10)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.frame_11 = QtWidgets.QFrame(self.frame_10)
        self.frame_11.setMinimumSize(QtCore.QSize(0, 50))
        self.frame_11.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_11.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_11.setObjectName("frame_11")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.frame_11)
        self.horizontalLayout_6.setContentsMargins(4, -1, -1, -1)
        self.horizontalLayout_6.setSpacing(6)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.frame_11)
        self.lineEdit_4.setMinimumSize(QtCore.QSize(0, 30))
        self.lineEdit_4.setStyleSheet("color: rgb(255, 255, 255);")
        self.lineEdit_4.setText("")
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.horizontalLayout_6.addWidget(self.lineEdit_4)
        self.pushButton_7 = QtWidgets.QPushButton(self.frame_11)
        self.pushButton_7.setMinimumSize(QtCore.QSize(0, 30))
        self.pushButton_7.setMaximumSize(QtCore.QSize(40, 16777215))
        self.pushButton_7.setStyleSheet("background-color: rgb(155, 255, 255);")
        self.pushButton_7.setObjectName("pushButton_7")
        self.horizontalLayout_6.addWidget(self.pushButton_7)
        self.verticalLayout_5.addWidget(self.frame_11)
        self.listWidget_3 = QtWidgets.QListWidget(self.frame_10)
        self.listWidget_3.setStyleSheet("color: rgb(255, 255, 255);")
        self.listWidget_3.setObjectName("listWidget_3")
        item = QtWidgets.QListWidgetItem()
        self.listWidget_3.addItem(item)
        self.verticalLayout_5.addWidget(self.listWidget_3)
        self.lineEdit_6 = QtWidgets.QLineEdit(self.frame_10)
        self.lineEdit_6.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 8pt \"MS Shell Dlg 2\";")
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.verticalLayout_5.addWidget(self.lineEdit_6)
        
        self.pushButton_8 = QtWidgets.QPushButton(self.frame_10)
        self.pushButton_8.setStyleSheet("color: rgb(0, 0, 0);\n"
"background-color: rgb(155, 255, 255);")
        self.pushButton_8.setObjectName("pushButton_8")
        self.verticalLayout_5.addWidget(self.pushButton_8)

        self.pushButton_10 = QtWidgets.QPushButton(self.frame_10)
        self.pushButton_10.setStyleSheet("color: rgb(0, 0, 0);\n"
"background-color: rgb(255, 0, 0);")
        self.pushButton_10.setObjectName("pushButton_10")
        self.verticalLayout_5.addWidget(self.pushButton_10)

        self.horizontalLayout_7.addWidget(self.frame_10)
        self.verticalLayout_3.addWidget(self.frame_9)
        self.label_4 = QtWidgets.QLabel(self.frame_4)
        self.label_4.setStyleSheet("font: 12pt \"MS Shell Dlg 2\";\n"
"color: rgb(255, 255, 255);")
        self.label_4.setObjectName("label_4")
        self.verticalLayout_3.addWidget(self.label_4)
        self.horizontalLayout_2.addWidget(self.frame_4)
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.frame)
        self.verticalLayout_6.addLayout(self.formLayout)
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.tab_2)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.frame_12 = QtWidgets.QFrame(self.tab_2)
        self.frame_12.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_12.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_12.setObjectName("frame_12")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.frame_12)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.label_5 = QtWidgets.QLabel(self.frame_12)
        self.label_5.setStyleSheet("color: rgb(255, 255, 255);\n"
"font:16pt \"MS Shell Dlg 2\";")
        self.label_5.setObjectName("label_5")
        self.verticalLayout_8.addWidget(self.label_5)
        self.comboBox = QtWidgets.QComboBox(self.frame_12)
        self.comboBox.setMinimumSize(QtCore.QSize(0, 40))
        self.comboBox.setStyleSheet("background-color: rgb(25, 25, 25);\n"
"color: rgb(255, 255, 255);\n"
"font: 16pt \"MS Shell Dlg 2\";")
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.verticalLayout_8.addWidget(self.comboBox)
        self.label_6 = QtWidgets.QLabel(self.frame_12)
        self.label_6.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 16pt \"MS Shell Dlg 2\";")
        self.label_6.setObjectName("label_6")
        self.verticalLayout_8.addWidget(self.label_6)

        self.lineEdit_9 = QtWidgets.QLineEdit(self.frame_12)
        self.lineEdit_9.setMinimumSize(QtCore.QSize(0, 40))
        self.lineEdit_9.setObjectName("lineEdit_9")
        self.verticalLayout_8.addWidget(self.lineEdit_9)
        self.lineEdit_9.setStyleSheet("font: 20pt \"MS Shell Dlg 2\";\n"
"color: rgb(255, 255, 255);")
        self.label_12 = QtWidgets.QLabel(self.frame_12)
        self.label_12.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 16pt \"MS Shell Dlg 2\";")
        self.label_12.setObjectName("label_12")
        self.verticalLayout_8.addWidget(self.label_12)


        self.lineEdit_7 = QtWidgets.QLineEdit(self.frame_12)
        self.lineEdit_7.setMinimumSize(QtCore.QSize(0, 40))
        self.lineEdit_7.setStyleSheet("font: 20pt \"MS Shell Dlg 2\";\n"
"color: rgb(255, 255, 255);")
        self.lineEdit_7.setText("")
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.verticalLayout_8.addWidget(self.lineEdit_7)
        self.label_7 = QtWidgets.QLabel(self.frame_12)
        self.label_7.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 16pt \"MS Shell Dlg 2\";")
        self.label_7.setObjectName("label_7")
        self.verticalLayout_8.addWidget(self.label_7)

        self.lineEdit_8 = QtWidgets.QLineEdit(self.frame_12)
        self.lineEdit_8.setMinimumSize(QtCore.QSize(0, 40))
        self.lineEdit_8.setObjectName("lineEdit_8")
        self.lineEdit_8.setStyleSheet("font: 20pt \"MS Shell Dlg 2\";\n"
"color: rgb(255, 255, 255);")
        self.verticalLayout_8.addWidget(self.lineEdit_8)
        self.label_8 = QtWidgets.QLabel(self.frame_12)
        self.label_8.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 16pt \"MS Shell Dlg 2\";")
        self.label_8.setObjectName("label_8")
        self.verticalLayout_8.addWidget(self.label_8)


       
        
        self.comboBox_2 = QtWidgets.QComboBox(self.frame_12)
        self.comboBox_2.setStyleSheet("background-color: rgb(25, 25, 25);\n"
"color: rgb(255, 255, 255);\n"
"font: 16pt \"MS Shell Dlg 2\";")
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.verticalLayout_8.addWidget(self.comboBox_2)
        self.label_9 = QtWidgets.QLabel(self.frame_12)
        self.label_9.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 16pt \"MS Shell Dlg 2\";")
        self.label_9.setObjectName("label_9")
        self.verticalLayout_8.addWidget(self.label_9)
        self.comboBox_3 = QtWidgets.QComboBox(self.frame_12)
        self.comboBox_3.setStyleSheet("background-color: rgb(25, 25, 25);\n"
"color: rgb(255, 255, 255);\n"
"font: 16pt \"MS Shell Dlg 2\";")
        self.comboBox_3.setObjectName("comboBox_3")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.verticalLayout_8.addWidget(self.comboBox_3)

        self.pushButton_11 = QtWidgets.QPushButton(self.frame_12)
        self.pushButton_11.setStyleSheet("background-color: rgb(139, 0, 0);\n"
"color: rgb(255, 255, 255);\n"
"font: 16pt \"MS Shell Dlg 2\";")
        self.pushButton_11.setObjectName("pushButton11")
        self.verticalLayout_8.addWidget(self.pushButton_11)



        self.verticalLayout_7.addWidget(self.frame_12)
        self.frame_13 = QtWidgets.QFrame(self.tab_2)
        self.frame_13.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_13.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_13.setObjectName("frame_13")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.frame_13)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.frame_14 = QtWidgets.QFrame(self.frame_13)
        self.frame_14.setMaximumSize(QtCore.QSize(200, 16777215))
        self.frame_14.setStyleSheet("background-color: rgb(25, 25, 25);")
        self.frame_14.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_14.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_14.setObjectName("frame_14")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.frame_14)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.label_10 = QtWidgets.QLabel(self.frame_14)
        self.label_10.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 14pt \"MS Shell Dlg 2\";")
        self.label_10.setObjectName("label_10")
        self.verticalLayout_9.addWidget(self.label_10)
        self.comboBox_4 = QtWidgets.QComboBox(self.frame_14)
        self.comboBox_4.setMaximumSize(QtCore.QSize(16777215, 40))
        self.comboBox_4.setStyleSheet("background-color: rgb(25, 25, 25);\n"
"color: rgb(255, 255, 255);\n"
"font: 16pt \"MS Shell Dlg 2\";")
        self.comboBox_4.setObjectName("comboBox_4")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.verticalLayout_9.addWidget(self.comboBox_4)
        self.label_11 = QtWidgets.QLabel(self.frame_14)
        self.label_11.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 14pt \"MS Shell Dlg 2\";")
        self.label_11.setObjectName("label_11")
        self.verticalLayout_9.addWidget(self.label_11)
        self.comboBox_5 = QtWidgets.QComboBox(self.frame_14)
        self.comboBox_5.setMaximumSize(QtCore.QSize(16777215, 40))
        self.comboBox_5.setStyleSheet("background-color: rgb(25, 25, 25);\n"
"color: rgb(255, 255, 255);\n"
"font: 16pt \"MS Shell Dlg 2\";")
        self.comboBox_5.setObjectName("comboBox_5")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        
        self.verticalLayout_9.addWidget(self.comboBox_5)
        self.horizontalLayout_8.addWidget(self.frame_14)

        
        self.frame_15 = QtWidgets.QFrame(self.frame_13)
        self.frame_15.setStyleSheet("background-color: rgb(25, 25, 25);")
        self.frame_15.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_15.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_15.setObjectName("frame_15")
        self.horizontalLayout_8.addWidget(self.frame_15)

        self.verticalLayout_00 = QtWidgets.QVBoxLayout(self.frame_15)
        self.verticalLayout_00.setObjectName("verticalLayout_00")

        self.mpl_can = MplWidget()
        self.btn_plot1 = QtWidgets.QPushButton(self.frame_15)
        self.btn_plot1.setStyleSheet("background-color: rgb(139, 0, 0);\n"
        "color: rgb(255, 255, 255);\n"
        "font: 16pt \"MS Shell Dlg 2\";")
        self.btn_plot1.setObjectName("btn_plot1")









        self.verticalLayout_7.addWidget(self.frame_13)
        self.tabWidget.addTab(self.tab_2, "")
        self.verticalLayout.addWidget(self.tabWidget)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1121, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.pushButton_3.clicked.connect(self.add_meal)
        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.calendarWidget.selectionChanged.connect(self.calendar_choosen)
        self.listWidget.itemClicked.connect(self.meal_choosen)
        self.calendarWidget.setSelectedDate(self.current_date)
        self.calendar_choosen()

        

                
        self.verticalLayout_00.addWidget(self.mpl_can)
        self.verticalLayout_00.addWidget(self.btn_plot1)
        


        
        self.pushButton_4.clicked.connect(self.delete_meal)
        self.lineEdit_2.textChanged.connect(self.search_product)
        self.pushButton_5.clicked.connect(self.search_product)

        self.lineEdit_4.textChanged.connect(self.search_activity)
        self.pushButton_7.clicked.connect(self.search_activity)

        self.pushButton_6.clicked.connect(self.add_product)
        self.pushButton_9.clicked.connect(self.delete_product)
        self.pushButton_8.clicked.connect(self.add_activity)
        self.pushButton_10.clicked.connect(self.delete_activity)
        self.calendarWidget.setMaximumDate(self.current_date)
        self.pushButton_11.clicked.connect(self.user_data_save)
        self.btn_plot1.clicked.connect(self.plot1)

    def retranslateUi(self, MainWindow):
        
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "⠀"))
        self.label.setText(_translate("MainWindow", f"<html><head/><body><p align=\"center\">{self.current_date.toString()}</p></body></html>"))
        
        self.pushButton_2.setText(_translate("MainWindow", "⠀"))
        self.pushButton_4.setText(_translate("MainWindow", "Usun posilek"))
        self.checkBox.setText(_translate("MainWindow", "Własna godzina (domyślnie - aktualna)"))
        self.pushButton_3.setText(_translate("MainWindow", "Dodaj posilek (max 10 na dzień)"))
        self.label_3.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt;\">Składniki posiłku</span></p></body></html>"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Waga"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Białko"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Weglowodany"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Tłuszcze"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Kalorie"))
        self.pushButton_5.setText(_translate("MainWindow", "Search"))
        __sortingEnabled = self.listWidget_2.isSortingEnabled()
        self.listWidget_2.setSortingEnabled(False)
        item = self.listWidget_2.item(0)
        item.setText(_translate("MainWindow", "Nowy element"))
        self.listWidget_2.setSortingEnabled(__sortingEnabled)
        self.lineEdit_3.setText(_translate("MainWindow", "waga (0-10000g)"))
        self.pushButton_6.setText(_translate("MainWindow", "Add"))
        self.pushButton_9.setText(_translate("MainWindow", "Delete"))
        self.label_2.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\">Aktywność fizyczna</p></body></html>"))
        item = self.tableWidget_2.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Czas (min)"))
        
        item = self.tableWidget_2.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Kalorie"))
        self.pushButton_7.setText(_translate("MainWindow", "Search"))
        __sortingEnabled = self.listWidget_3.isSortingEnabled()
        self.listWidget_3.setSortingEnabled(False)
        item = self.listWidget_3.item(0)
        item.setText(_translate("MainWindow", "Nowy element"))
        self.listWidget_3.setSortingEnabled(__sortingEnabled)
        self.lineEdit_6.setText(_translate("MainWindow", "czas (max 1440min)"))
        self.pushButton_8.setText(_translate("MainWindow", "Add"))
        self.pushButton_10.setText(_translate("MainWindow", "Delete"))
        self.label_4.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\">Zostało dzisiaj: Zapotrzebowanie-Jedzenie+trening</p></body></html>"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Kalorie"))
        self.label_5.setText(_translate("MainWindow", "Płeć:"))
        self.comboBox.setItemText(0, _translate("MainWindow", "Wybierz płeć:"))
        self.comboBox.setItemText(1, _translate("MainWindow", "Mężczyzna"))
        self.comboBox.setItemText(2, _translate("MainWindow", "Kobieta"))
        self.label_6.setText(_translate("MainWindow", "Wzrost(cm):"))
        self.label_7.setText(_translate("MainWindow", "Waga(kg)"))
        self.label_8.setText(_translate("MainWindow", "Dzienna aktywność:"))
        self.label_12.setText(_translate("MainWindow", "Wiek:"))

        self.comboBox_2.setItemText(0, _translate("MainWindow", "Wybierz Aktywność"))
        self.comboBox_2.setItemText(1, _translate("MainWindow", "Brak (Praca siedząca, leżenie)"))
        self.comboBox_2.setItemText(2, _translate("MainWindow", "Bardzo mała(Lekka praca, trening 1 w tygodniu)"))
        self.comboBox_2.setItemText(3, _translate("MainWindow", "Umiarkowana (praca, treningi 3x w tygodniu)"))
        self.comboBox_2.setItemText(4, _translate("MainWindow", "Duża (ciężki trening kilka razy w tygodniu)"))
        self.comboBox_2.setItemText(5, _translate("MainWindow", "Bardzo duża(Ciężka praca, ciężkie ćwiczenia 4x w tygodniu)"))
        self.label_9.setText(_translate("MainWindow", "Cel:"))
        self.comboBox_3.setItemText(0, _translate("MainWindow", "Wybierz cel wagowy:"))
        self.comboBox_3.setItemText(1, _translate("MainWindow", "+1kg/tydzien"))
        self.comboBox_3.setItemText(2, _translate("MainWindow", "+0.75kg/tydzien"))
        self.comboBox_3.setItemText(3, _translate("MainWindow", "+0.5kg/tydzien"))
        self.comboBox_3.setItemText(4, _translate("MainWindow", "+0.25kg/tydzien"))
        self.comboBox_3.setItemText(5, _translate("MainWindow", "Utrzymanie wagi"))
        self.comboBox_3.setItemText(6, _translate("MainWindow", "-0.25kg/tydzien"))
        self.comboBox_3.setItemText(7, _translate("MainWindow", "-0.5kg/tydzien"))
        self.comboBox_3.setItemText(8, _translate("MainWindow", "-0.75kg/tydzien"))
        self.comboBox_3.setItemText(9, _translate("MainWindow", "-1kg/tydzien"))
        self.pushButton_11.setText(_translate("MainWindow", "Save changes"))
        self.label_10.setText(_translate("MainWindow", "Okres czasu:"))
        self.comboBox_4.setItemText(0, _translate("MainWindow", "Tydzień"))
        self.comboBox_4.setItemText(1, _translate("MainWindow", "Miesiąc"))
        self.comboBox_4.setItemText(2, _translate("MainWindow", "3 Miesiące"))
        self.comboBox_4.setItemText(3, _translate("MainWindow", "Rok"))
        self.label_11.setText(_translate("MainWindow", "Dane:"))
        self.comboBox_5.setItemText(0, _translate("MainWindow", "Waga"))
        self.comboBox_5.setItemText(1, _translate("MainWindow", "Wzrost"))
        self.comboBox_5.setItemText(2, _translate("MainWindow", "Czas ćwiczeń"))
        
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Użytkownik"))
        self.btn_plot1.setText(_translate("MainWindow", "Refresh table"))










    def user_data_save(self):
        
        plec=self.comboBox.currentIndex()
        wiek=self.lineEdit_7.text()
        wzrost=self.lineEdit_9.text()
        waga=self.lineEdit_8.text()
        pal=self.comboBox_2.currentIndex()
        celwagowy=self.comboBox_3.currentIndex()
        dane=[['waga', waga], ['wzrost',wzrost], ['wiek',wiek], ['pal',pal], ['plec',plec], ['celwagowy',celwagowy]]

        db=sqlite3.connect('aplikacjafitmierz.db')
        cursor=db.cursor()
        cursor.execute(f"SELECT waga, wzrost, wiek, pal, plec, celwagowy from '{self.table_name}'")
        for tabela in dane:
                tabela[0]=tabela[0].capitalize()
                cursor.execute(f"SELECT {tabela[0]} From '{self.table_name}' WHERE ({tabela[0]}) IS NOT NULL OR trim({tabela[0]})!='' OR trim({tabela[0]})!=' '")
                dana=cursor.fetchall()
                if dana!=[]:
                        cursor.execute(f"""UPDATE '{self.table_name}'
                                        SET '{tabela[0]}'='{tabela[1]}'
                                        WHERE {tabela[0]}='{dana[0][0]}';""")
                        db.commit()
                else:
                        cursor.execute(f"""INSERT INTO '{self.table_name}' ({tabela[0]}) VALUES ({tabela[1]});""")
                        db.commit()
                
    

    def calendar_choosen(self):
        
        self.lineEdit_8.setText('')
                                        
        self.lineEdit_9.setText('')
                                
        self.lineEdit_7.setText('')
                               
        self.comboBox.setCurrentIndex(0)
                                
        self.comboBox_2.setCurrentIndex(0)
                                
        self.comboBox_3.setCurrentIndex(0)

        self.listWidget.clear()
        self.listWidget_2.clear()
        self.listWidget_3.clear()
        self.tableWidget.setRowCount(0)
        self.current_date=self.calendarWidget.selectedDate()
        self.tableWidget_2.setRowCount(0)
        db=sqlite3.connect('aplikacjafitmierz.db')
        cursor=db.cursor()


        self.table_name=str(self.current_date.toString("yyyy.MM.dd"))
        

        self.label.setText(f"<html><head/><body><p align=\"center\">{self.current_date.toString()}</p></body></html>")
        cursor.execute(f"""SELECT * FROM sqlite_schema WHERE name='{self.table_name}'""")
        if_exist=cursor.fetchall()
        
        
        if if_exist==[]:
                cursor.execute(f"""CREATE TABLE IF NOT EXISTS '{self.table_name}' (Waga REAL, Wzrost Real, Cwiczenia TEXT, Wiek INTEGER, Pal TEXT, Plec TEXT, Celwagowy TEXT, Posilki TEXT);""") #jesli tabela z x dniem nie istnieje
                cursor.execute(f"""SELECT 
                        name
                        FROM 
                        sqlite_schema;""")
                all_tables=cursor.fetchall()
                
                
                for i in range(len(all_tables)):
                        all_tables[i]=all_tables[i][0]
                
                for elem in all_tables:
                        if elem=='Produkty' or elem=='Aktywnosci':
                                all_tables.remove(elem)

                dates = [datetime.strptime(ts, "%Y.%m.%d") for ts in all_tables]
                dates.sort()
                if datetime.now().month<10:
                        miesiac='0'+str(datetime.now().month)
                else:
                        miesiac=datetime.now().month

                if datetime.now().day<10:
                        day='0'+str(datetime.now().day) 
                else:
                        day=datetime.now().day
                aktualna_data=f"{datetime.now().year}.{miesiac}.{day}"
                aktualna_data=datetime.strptime(aktualna_data, "%Y.%m.%d")
                
                if dates[::-1][1]<datetime.strptime(self.table_name, "%Y.%m.%d"):

                        sorteddates = [datetime.strftime(ts, "%Y.%m.%d") for ts in dates]
                        sorteddates

                        table_to_choose_from=sorteddates[::-1][1]
                        
                        
                        dane=['Waga', 'Wzrost', 'Wiek', 'Pal', 'Plec', 'Celwagowy']
                        cursor.execute(f"SELECT * FROM '{table_to_choose_from}'")
                        for dana in dane:
                                cursor.execute(f"SELECT {dana} FROM '{table_to_choose_from}' WHERE ({dana}) IS NOT NULL OR trim({dana})!='' OR trim({dana})!=' '")
                                all_data=cursor.fetchone()
                                if all_data!=None:
                                        cursor.execute(f"INSERT INTO '{self.table_name}' ({dana}) VALUES ({all_data[0]})")
                        all_data_from_old=cursor.fetchall()
                        
                        db.commit()
        

        
        
        dane=['Waga', 'Wzrost', 'Wiek', 'Pal', 'Plec', 'Celwagowy']

        
        for dana in dane:
                        cursor.execute(f"SELECT {dana} from '{self.table_name}' WHERE ({dana}) IS NOT NULL OR trim({dana})!='' OR trim({dana})!=' '")
                        all_data=cursor.fetchone()
                        
                        if all_data!=None:
                                
                                if dana=='Waga':
                                        self.lineEdit_8.setText(str(all_data[0]))
                                elif dana=='Wzrost':
                                        self.lineEdit_9.setText(str(all_data[0]))
                                elif dana=='Wiek':
                                        self.lineEdit_7.setText(str(all_data[0]))
                                elif dana=='Pal':
                                        self.comboBox.setCurrentIndex(int(all_data[0]))
                                elif dana=='Plec':
                                        self.comboBox_2.setCurrentIndex(int(all_data[0]))
                                elif dana=='Celwagowy':
                                        self.comboBox_3.setCurrentIndex(int(all_data[0]))

        self.plec=self.comboBox.currentIndex()
        self.wiek=self.lineEdit_7.text()
        self.wzrost=self.lineEdit_9.text()
        self.waga=self.lineEdit_8.text()
        self.pal=self.comboBox_2.currentIndex()
        self.celwagowy=self.comboBox_3.currentIndex()
        
        

        #uzupelnia tabele z aktywnosciami
        #[Jazda na rowerze, 6, 30][Trening siłowy, 8, 40]  

                       
        cursor.execute(f"SELECT (Posilki) from '{self.table_name}' WHERE (Posilki) IS NOT NULL OR trim(Posilki)!='' OR trim(Posilki)!=' '") #wybierz cwiczenia
        posilki=cursor.fetchall()
        self.all_meals_list=[]
        if posilki!=[]:
                self.posilki_stare=posilki[0][0]
        for posilek in posilki:
                
                for oczyszczony_posilek in posilek:
                        
                        oczyszczony_posilek=oczyszczony_posilek.split('; ')
                        
                        for posil in oczyszczony_posilek:
                                posil=posil.replace(';','')
                                posil=posil.split(', ')
                                if posil[0]!='':
                                        item_l=QtWidgets.QListWidgetItem(posil[0])
                                        self.listWidget.addItem(item_l)
                                        self.all_meals_list.append(item_l)
        row=0
        
        cursor.execute(f"""SELECT (Cwiczenia) from '{self.table_name}' WHERE (Cwiczenia) IS NOT NULL OR trim(Cwiczenia)!='' OR trim(Cwiczenia)!=' '""")
        cwiczenia=cursor.fetchall()
        self.cwiczenia_kcal_suma=[0]*2
        
        if str(cwiczenia)!="""[('',)]""":
                for cwiczenie in cwiczenia:
                        for oczyszczone_cwiczenie in cwiczenie:
                                oczyszczone_cwiczenie=oczyszczone_cwiczenie.split('; ')
                                
                                for elem in oczyszczone_cwiczenie:
                                        
                                        mniejsza=elem.split(',')
                                        
                                        rowPosition = self.tableWidget_2.rowCount()
                                        self.tableWidget_2.insertRow(rowPosition) #dodaje cwiczenie row
                                        
                                        self.tableWidget_2.setVerticalHeaderItem(row,QtWidgets.QTableWidgetItem(f"{mniejsza[0]}")) #nazywa row 
                                        
                                        
                                        self.tableWidget_2.setItem(rowPosition , 0, QtWidgets.QTableWidgetItem(f"{mniejsza[1]}")) #uzupelnia row w tabeli
                                        row=row+1
                                        if mniejsza[0][0]==" ":
                                                mniejsza[0]=mniejsza[0][1:]
                                        cursor.execute(f"""SELECT * FROM 'Aktywnosci' WHERE Nazwa='{mniejsza[0]}'""")
                                        cwiczenia_kcal=cursor.fetchall()
                                        
                                        mniejsza[1]=int(str(mniejsza[1]).replace(';',''))
                                        
                                        self.tableWidget_2.setItem(rowPosition , 1, QtWidgets.QTableWidgetItem(f"{(int(mniejsza[1])/60)*int(cwiczenia_kcal[0][1])}"))
                                        self.cwiczenia_kcal_suma[0]=self.cwiczenia_kcal_suma[0]+mniejsza[1]
                                        self.cwiczenia_kcal_suma[1]=self.cwiczenia_kcal_suma[1]+(int(mniejsza[1])/60)*int(cwiczenia_kcal[0][1])

                                
                                self.tableWidget_2.insertRow(rowPosition+1) #dodaje cwiczenie row                        
                                self.tableWidget_2.setVerticalHeaderItem(row,QtWidgets.QTableWidgetItem(f"Suma"))

                                self.tableWidget_2.setItem(row , 0, QtWidgets.QTableWidgetItem(f"{self.cwiczenia_kcal_suma[0]}"))
                                self.tableWidget_2.setItem(row , 1, QtWidgets.QTableWidgetItem(f"{self.cwiczenia_kcal_suma[1]}"))
        
        self.zapotrzebowanie()


    def meal_choosen(self):
        self.tableWidget.setRowCount(0)
        db=sqlite3.connect('aplikacjafitmierz.db')
        cursor=db.cursor()
        cursor.execute(f"SELECT (Posilki) from '{self.table_name}' WHERE (Posilki) IS NOT NULL OR trim(Posilki)!='' OR trim(Posilki)!=' '") #wybierz cwiczenia
        posilki=cursor.fetchall()
        
        if self.listWidget.selectedItems()!=[]:
                self.wybrany_item=self.listWidget.selectedItems()[0].text()
        row=0
        #Sniadanie, Jajka-60, Chleb-30; Obiad, Ziemniaki gotowane-200; tak w bazie danych
        for posilek in posilki:

                for oczyszczony_posilek in posilek:
                        
                        oczyszczony_posilek=oczyszczony_posilek.split('; ')
                        
                        for i in oczyszczony_posilek:
                                for selected_item in self.listWidget.selectedItems():
                                        tabela_suma=[0]*6
                                        if selected_item.text() in i:                  
                                                i=i.split(', ')
                                                self.posilek_wybrany_aktualnie=i
                                                del i[0]
                                                
                                                for element in i:
                                                        element=element.replace(';','')
                                                        element=element.split('-')
                                                        
                                                        rowPosition = self.tableWidget.rowCount()
                                                        self.tableWidget.insertRow(rowPosition) #dodaje posilek row
                                                        self.tableWidget.setVerticalHeaderItem(row,QtWidgets.QTableWidgetItem(f"{element[0]}")) #nazywa row 

                                                        row=row+1  
                                                        
                                                        sumakcal=0
                                                        for i in range(1,2):

                                                                self.tableWidget.setItem(rowPosition , i-1, QtWidgets.QTableWidgetItem(f"{element[i]}g"))  
                                                                tabela_suma[i]=tabela_suma[i]+int(element[i])

                                                        for i in range(2,5):
                                                                cursor.execute(f"""SELECT * FROM "Produkty" WHERE Nazwa='{element[0]}'""")
                                                                kalorie=cursor.fetchall()
                                                                if i==4:

                                                                        sumakcal=sumakcal+(kalorie[0][i-1])*9*(int(element[1])/100)
                                                                        
                                                                        tabela_suma[i]=tabela_suma[i]+(kalorie[0][i-1]*(int(element[1])/100))
                                                                else:
                                                                        sumakcal=sumakcal+(kalorie[0][i-1])*4*(int(element[1])/100)
                                                                        
                                                                        tabela_suma[i]=tabela_suma[i]+(kalorie[0][i-1]*(int(element[1])/100))


                                                                self.tableWidget.setItem(rowPosition , i-1, QtWidgets.QTableWidgetItem(f"{kalorie[0][i-1]*(int(element[1])/100)}g")) 
                                                        self.tableWidget.setItem(rowPosition , 4, QtWidgets.QTableWidgetItem(f"{round(sumakcal)} kcal")) 
                                                        tabela_suma[5]=tabela_suma[5]+sumakcal
                        
                                                rowPosition = self.tableWidget.rowCount() 
                                                
                                                rowPosition=rowPosition-1           
                                                self.tableWidget.insertRow(rowPosition+1) #dodaje posilek row 
                                                
                                                self.tableWidget.setVerticalHeaderItem(row,QtWidgets.QTableWidgetItem(f"Suma"))  
                                                for i in range(1,6):
                                                        if i==5:
                                                                self.tableWidget.setItem(row , i-1, QtWidgets.QTableWidgetItem(f"{round(tabela_suma[i])} kcal"))
                                                        else:
                                                                self.tableWidget.setItem(row , i-1, QtWidgets.QTableWidgetItem(f"{round(tabela_suma[i])} g"))
                        


    def add_meal(self):         
        db=sqlite3.connect('aplikacjafitmierz.db')
        cursor=db.cursor()
        
        
        #Sniadanie, Jajka-60, Chleb-30; Obiad, Ziemniaki gotowane-200; tak w bazie danych
        
        if self.lineEdit.text()!='' and len(self.lineEdit.text())<30:

                meal_time=QtCore.QTime.currentTime().toString(QtCore.Qt.DefaultLocaleLongDate)
                meal_time=meal_time[:5]      
                cursor.execute(f"SELECT (Posilki) from '{self.table_name}' WHERE (Posilki) IS NOT NULL OR trim(Posilki)!='' OR trim(Posilki)!=' '")
                posilki=cursor.fetchall()

                if posilki==[]:
                        if self.checkBox.isChecked():
                                cursor.execute(f"""INSERT INTO '{self.table_name}' (Posilki) VALUES ('{self.lineEdit.text()+' '+self.timeEdit.text()+';'}')""")
                                db.commit()
                        else:
                                cursor.execute(f"""INSERT INTO '{self.table_name}' (Posilki) VALUES ('{self.lineEdit.text()+' '+meal_time+';'}')""")
                                db.commit()
                else:
                        for posilek in posilki:             
                                for oczyszczony_posilek in posilek:
                                        
                                        if self.checkBox.isChecked():
                                                cursor.execute(f"""UPDATE '{self.table_name}'
                                                                SET 'Posilki'='{oczyszczony_posilek+' '+self.lineEdit.text()+' '+self.timeEdit.text()+';'}'
                                                                WHERE Posilki='{oczyszczony_posilek}';""")
                                                db.commit()
                                        else:
                                                cursor.execute(f"""UPDATE '{self.table_name}'
                                                                SET 'Posilki'='{oczyszczony_posilek+' '+self.lineEdit.text()+' '+meal_time+';'}'
                                                                WHERE Posilki='{oczyszczony_posilek}';""")
                                                db.commit()
                self.calendar_choosen()
        self.lineEdit.setText('')



    def delete_meal(self):
        if self.listWidget.selectedItems()!=[]:

                db=sqlite3.connect('aplikacjafitmierz.db')
                cursor=db.cursor()
                meal_time=QtCore.QTime.currentTime().toString(QtCore.Qt.DefaultLocaleLongDate)
                meal_time=meal_time[:5]      
                cursor.execute(f"SELECT (Posilki) from '{self.table_name}' WHERE (Posilki) IS NOT NULL OR trim(Posilki)!='' OR trim(Posilki)!=' '")
                posilki=cursor.fetchall()

                wybrany_item=self.listWidget.selectedItems()[0].text()

                for posilek in posilki:
                        for oczyszczony_posilek in posilek:
                                
                                original_posilek=oczyszczony_posilek
                                oczyszczony_posilek=oczyszczony_posilek.split('; ')
                                
                                for num,i in enumerate(oczyszczony_posilek):
                                        if wybrany_item in oczyszczony_posilek[num]:
                                                del oczyszczony_posilek[num]   

                nowy='; '.join(oczyszczony_posilek)
                cursor.execute(f"""UPDATE '{self.table_name}'
                                SET 'Posilki'='{nowy}'
                                WHERE Posilki='{original_posilek}';""")
                db.commit()
                self.calendar_choosen()
    



    def search_product(self):
        self.listWidget_2.clear()  
        db=sqlite3.connect('aplikacjafitmierz.db')
        cursor=db.cursor()
        cursor.execute(f"""SELECT  * FROM "Produkty" WHERE Nazwa LIKE '%{self.lineEdit_2.text()}%'""")
        produkty=cursor.fetchall()
        for produkt in produkty:
                self.listWidget_2.addItem(produkt[0])

    def add_product(self):
        db=sqlite3.connect('aplikacjafitmierz.db')
        cursor=db.cursor()
        
        if (self.lineEdit_3.text()).isdigit() and self.listWidget_2.selectedItems!=[]:
                
                if int((self.lineEdit_3.text()))<10000 and int((self.lineEdit_3.text()))>0:
                        
                        produkt_do_dodania=self.listWidget_2.selectedItems()
                        if produkt_do_dodania!=[] and self.lineEdit_3.text().isdigit():

                                gotowy_do_dodania=f'{produkt_do_dodania[0].text()}-{self.lineEdit_3.text()};'
                        
                                cursor.execute(f"SELECT (Posilki) from '{self.table_name}' WHERE (Posilki) IS NOT NULL OR trim(Posilki)!='' OR trim(Posilki)!=' '")
                                posilki=cursor.fetchall()
                                
                                for posilek in posilki:
                                        
                                        for oczyszczony in posilek:
                                                
                                                origin=oczyszczony
                                                oczyszczony=oczyszczony.split("; ")
                                                
                                                oczyszczony[self.listWidget.currentRow()]=oczyszczony[self.listWidget.currentRow()].replace(';','')+', '+gotowy_do_dodania
                                                for i in range(len(oczyszczony)):
                                                        oczyszczony[i]=oczyszczony[i].replace(';','')
                                                cursor.execute(f"""UPDATE '{self.table_name}'
                                                SET 'Posilki'='{"; ".join(oczyszczony)}'
                                                WHERE Posilki='{origin}';""")
                                                db.commit()
                                                for meal in self.all_meals_list:
                                                        if meal.text()==self.wybrany_item:
                                                                self.listWidget.setCurrentItem(meal)
                                                        
                                                                
                                                
                                                self.tableWidget.clearSelection()
                                                self.listWidget.setCurrentRow(self.listWidget.currentRow()) 
                                                self.meal_choosen()    




    def delete_product(self):
        db=sqlite3.connect('aplikacjafitmierz.db')
        cursor=db.cursor()
       
        if self.tableWidget.currentRow()+1!=self.tableWidget.rowCount() and self.tableWidget.currentRow()!=-1:
                cursor.execute(f"SELECT (Posilki) from '{self.table_name}' WHERE (Posilki) IS NOT NULL OR trim(Posilki)!='' OR trim(Posilki)!=' '")
                posilki=cursor.fetchall()
        
                nowa_lista=posilki[0][0].split('; ')
                
                if nowa_lista[len(nowa_lista)-1]=='':
                        del nowa_lista[len(nowa_lista)-1]
                
                for i in range(len(nowa_lista)):
                        
                        nowa_lista[i]=nowa_lista[i].split(', ')
                del nowa_lista[self.listWidget.currentRow()][self.tableWidget.currentRow()+1]
                
                wsadz_z_powrotem=''
                
                for lista in nowa_lista:
                        wsadz_z_powrotem=wsadz_z_powrotem+", ".join(lista)+'; '
                
                cursor.execute(f"""UPDATE '{self.table_name}'
                                        SET 'Posilki'='{wsadz_z_powrotem}'
                                        WHERE Posilki='{posilki[0][0]}';""")
                db.commit()
                for meal in self.all_meals_list:
                        if meal.text()==self.wybrany_item:
                                self.listWidget.setCurrentItem(meal)
                        
                                
                
                self.tableWidget.clearSelection()
                self.listWidget.setCurrentRow(self.listWidget.currentRow()) 
                self.meal_choosen()    

    def search_activity(self):

        self.listWidget_3.clear()  
        db=sqlite3.connect('aplikacjafitmierz.db')
        cursor=db.cursor()
        cursor.execute(f"""SELECT  * FROM "Aktywnosci" WHERE Nazwa LIKE '%{self.lineEdit_4.text()}%'""")
        produkty=cursor.fetchall()
        for produkt in produkty:
                self.listWidget_3.addItem(produkt[0])
        
    def add_activity(self):
        db=sqlite3.connect('aplikacjafitmierz.db')
        cursor=db.cursor()
        if (self.lineEdit_6.text()).isdigit():
                
                if int((self.lineEdit_6.text()))<1440 and int((self.lineEdit_6.text()))>0 and self.listWidget_3.selectedItems()!=[]:
                        cursor.execute(f"SELECT (Cwiczenia) from '{self.table_name}' WHERE (Cwiczenia) IS NOT NULL OR trim(Cwiczenia)!='' OR trim(Cwiczenia)!=' '")
                        cwiczenia=cursor.fetchall()
                        
                        if str(cwiczenia)!='[]':
                                
                                original_cwiczenia=cwiczenia[0][0]
                                do_dodania=f"{self.listWidget_3.selectedItems()[0].text()}, {self.lineEdit_6.text()}"
                                
                                ostateczne=original_cwiczenia+' '+do_dodania+';'

                                cursor.execute(f"""UPDATE '{self.table_name}'
                                                SET 'Cwiczenia'='{ostateczne}'
                                                WHERE Cwiczenia='{original_cwiczenia}';""")
                                db.commit()
                        else:
                                
                                cursor.execute(f"""INSERT INTO '{self.table_name}' (Cwiczenia) VALUES ('{self.listWidget_3.selectedItems()[0].text()}, {self.lineEdit_6.text()};');""")
                                db.commit()                                       
                        self.calendar_choosen()
                        self.listWidget.setCurrentRow(self.listWidget.currentRow()) 
                        self.meal_choosen()
                        


    def delete_activity(self):
        if self.tableWidget_2.currentRow()+1!=self.tableWidget_2.rowCount():
                db=sqlite3.connect('aplikacjafitmierz.db')
                cursor=db.cursor()
                cursor.execute(f"SELECT (Cwiczenia) from '{self.table_name}' WHERE (Cwiczenia) IS NOT NULL OR trim(Cwiczenia)!='' OR trim(Cwiczenia)!=' '")
                cwiczenia=cursor.fetchall()
                original_cwiczenia=cwiczenia[0][0]
                zachowaj=original_cwiczenia
                
                original_cwiczenia=original_cwiczenia.split('; ')
                if self.tableWidget_2.rowCount()-1==self.tableWidget_2.currentRow():
                        original_cwiczenia[self.tableWidget_2.currentRow()-1]=original_cwiczenia[self.tableWidget_2.currentRow()-1]+';'
                del original_cwiczenia[self.tableWidget_2.currentRow()]
                nowa="; ".join(original_cwiczenia)
                cursor.execute(f"""UPDATE '{self.table_name}'
                                SET 'Cwiczenia'='{nowa}'
                                WHERE Cwiczenia='{zachowaj}';""")
                db.commit()                             
                self.calendar_choosen()
                self.listWidget.setCurrentRow(self.listWidget.currentRow()) 
                self.meal_choosen()

    def zapotrzebowanie(self):
        self.caly_dzien=0
        db=sqlite3.connect('aplikacjafitmierz.db')
        cursor=db.cursor()
        cursor.execute(f"SELECT (Posilki) from '{self.table_name}' WHERE (Posilki) IS NOT NULL OR trim(Posilki)!='' OR trim(Posilki)!=' '")
        posilki=cursor.fetchall()
        for a in posilki:
                for posilek in a:
                        for pos in posilek.split(';'):
                                pos=pos.split(', ')
                                del pos[0]
                                for element in pos:
                                    
                                        element=(element.split('-'))
                                        cursor.execute(f"""SELECT * FROM 'Produkty' WHERE Nazwa='{element[0]}'""")
                                        makro=cursor.fetchall()
                                        for i in range(1,4):
                                                if i==3:
                                                        self.caly_dzien=self.caly_dzien+9*int(makro[0][i])*(float(element[1])/100)
                                                else:
                                                        self.caly_dzien=self.caly_dzien+4*int(makro[0][i])*(float(element[1])/100)

        Pal=1+(self.comboBox_2.currentIndex()/5)-0.1

        self.zapotrzebowanie_uzytkownika=0
       
        if self.comboBox.currentIndex()==1:
                
                self.zapotrzebowanie_uzytkownika=66+   (13.7*(float(self.waga)) + 5 * (float(self.wzrost)) - 6.8 * float(int(self.wiek))) *Pal
        if self.comboBox.currentIndex()==2:
                self.zapotrzebowanie_uzytkownika=665+   (9.6*(float(self.waga)) + 1.8 * (float(self.wzrost)) - 4.7 * float(int(self.wiek))) *Pal
        dodaj_kcal=0

        if self.comboBox_3.currentIndex()==1:
                dodaj_kcal=1000
        elif  self.comboBox_3.currentIndex()==2: 
                dodaj_kcal=750      
        elif  self.comboBox_3.currentIndex()==3:
                dodaj_kcal=500
        elif  self.comboBox_3.currentIndex()==4:
                dodaj_kcal=250
        elif  self.comboBox_3.currentIndex()==6:
                dodaj_kcal=-250
        elif  self.comboBox_3.currentIndex()==7:
                dodaj_kcal=-500
        elif  self.comboBox_3.currentIndex()==8:
                dodaj_kcal=-750
        elif  self.comboBox_3.currentIndex()==9:
                dodaj_kcal=-1000
        self.label_4.setText(f'<html><head/><body><p align=\"center\">Zostalo do spozycia: {str((dodaj_kcal+self.zapotrzebowanie_uzytkownika+self.cwiczenia_kcal_suma[1])-(self.caly_dzien))} kcal</p></body></html>')

    def plot1(self):
                
                from datetime import date
                
                db=sqlite3.connect('aplikacjafitmierz.db')
                cursor=db.cursor()
                day=int(self.table_name.split('.')[2])
                month=int(self.table_name.split('.')[1])
                year=int(self.table_name.split('.')[0])
                tabela31=['01','03','05','07','08','10','12']
                tabela30=['04','06','09','11']
                elementy=[]
                datawybrana=[]          
                x = date(year, month, day)
                sumacwiczen=0
                element=self.comboBox_5.currentIndex()
                if element==0:
                        element="Waga"
                elif element==1:
                        element="Wzrost"
                elif element==2:
                        element="Cwiczenia"
                poprzedni=''
                if self.comboBox_4.currentIndex()==0:
                        dni=7
                elif self.comboBox_4.currentIndex()==1:
                        dni=30
                elif self.comboBox_4.currentIndex()==2:
                        dni=90
                elif self.comboBox_4.currentIndex()==3:
                        dni=365
                for i in range(dni):
                        if day==0:
                                if month==1:
                                        year=year-1
                                        month=12
                                        day=31
                                else:
                                        month=month-1
                                        if month<10:
                                                miesiac=str('0'+str(month))
                                        else:
                                                miesiac=str(month)
                                        
                                        if miesiac in tabela31:
                                                day=31
                                        elif miesiac in tabela30:
                                                day=30
                                        else:
                                                if year%4==0:
                                                        day=29
                                                else:
                                                        print('tu')
                                                        day=28
                        
                        try:                         
                                x=str(x).replace('-','.')                               
                                cursor.execute(f"""SELECT {element} from '{x}' WHERE {element} IS NOT NULL""") 
                                if element=="Cwiczenia":
                                        a=cursor.fetchall()
                                        
                                        for elem in a:
                                                
                                                jajo=elem[0].split(';')
                                                
                                                for i in jajo:
                                                        i=i.split(', ')
                                                        sumacwiczen=sumacwiczen+int(i[1])
                                                        
                                                        elementy.append(sumacwiczen)
                                                        datawybrana.append(x) 
                                else:
                                        a=cursor.fetchone()    
                                        for char in a:
                                                poprzedni=char
                                                elementy.append(char)
                                                datawybrana.append(x) 

                        except:
                                if element=="Cwiczenia":
                                        elementy.append(0)
                                        x=str(x).replace('-','.')
                                        datawybrana.append(x)
                                else:
                                        elementy.append(poprzedni)
                                        x=str(x).replace('-','.')
                                        datawybrana.append(x)
                        x = date(year, month, day)
                        
                        day=day-1       

                self.mpl_can.plot_line(datawybrana[::-1], elementy[::-1], label='Waga')


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
